server {
        listen 80;
        listen [::]:80;

        server_name [DOMAIN]
        return 301 https://$server_name$request_uri;
}

server {

    server_name [DOMAIN]
    root /var/www/[DOMAIN]/public_html/public;

    location / {
        # try to serve file directly, fallback to app.php
        try_files $uri /index.php$is_args$args;
    }

    location ~ ^/index\.php(/|$) {
        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
       # When you are using symlinks to link the document root to the
       # current version of your application, you should pass the real
       # application path instead of the path to the symlink to PHP
       # FPM.
       # Otherwise, PHP's OPcache may not properly detect changes to
       # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
       # for more information).
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param DOCUMENT_ROOT $document_root;
       # Prevents URIs that include the front controller. This will 404:
       # http://domain.tld/app.php/some-path
       # Remove the internal directive to allow URIs like this
       internal;
   }

   # return 404 for all other php files not matching the front controller
   # this prevents access to other php files you don't want to be accessible.
   location ~ \.php$ {
     return 404;
   }

   # Stop deep linking or hot linking
   location /sites/default/files/ {
     valid_referers none blocked [DOMAIN] *.[DOMAIN] *.google.com *.facebook.com *.twitter.com *.instagram.com;
     if ($invalid_referer) {
       return   403;
     }
   }

   location ~ .(gif|png|jpg|jpe?g)$ {
     valid_referers none blocked [DOMAIN] *.[DOMAIN] *.google.com *.facebook.com *.twitter.com *.instagram.com;
     if ($invalid_referer) {
        return   403;
     }
   }

   if ($request_method !~ ^(GET|HEAD|POST)$ )
   {
      return 405;
   }

    # ==========
    # Set Header for knowing device type
    add_header x-ua-device $ua_device;
    # ==========

    add_header X-XSS-Protection "1; mode=block";

   location /sitemap.xml$ {
     add_header content-type "text/xml";
   }

    error_log /var/log/nginx/[DOMAIN]_error.log;
    access_log /var/log/nginx/[DOMAIN]_access.log;

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/[DOMAIN]-0001/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/[DOMAIN]-0001/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

